<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.stockm8.mappers.receivingMapper">
  
  <resultMap type="com.stockm8.domain.vo.ReceivingShipmentVO" id="receivingShipmentMap">
  	<id property="productId" column="product_id"/>
  	<result property="receivingShipmentNo" column="receiving_shipment_no"/>
  	<result property="createdAt" column="created_at"/>
  	<result property="status" column="status"/>
  	<result property="transactionType" column="transaction_type"/>
  	<result property="changeQuantity" column="change_quantity"/>
  	<result property="transactionUnit" column="transaction_unit"/>
  	<result property="orderItemId" column="order_item_id"/>
  	<result property="stockId" column="stock_id"/>
  	<result property="warehouseId" column="warehouse_id"/>
  	<result property="createdBy" column="created_by"/>
  	<result property="updateAt" column="update_at"/>
  	<result property="memo" column="memo"/>
  	
  	<!-- 조인된 데이터 매핑 -->
    <result property="productName" column="product_name"/>
    <result property="productDescription" column="product_description"/>
    <result property="productPrice" column="product_price"/>   
    <result property="businessId" column="business_id"/>   
  </resultMap>
  

<!-- 테이블에 입고 데이터 입력 -->
<insert id="insertReceiving">
INSERT INTO receiving_shipment (
    transaction_type, 
    status, 
    product_id, 
    change_quantity, 
    order_item_id,
    stock_id,
    warehouse_id,
    created_by
)
SELECT 
    ord.order_type, 
    'PENDING',
    p.product_id, 
    o.quantity, 
    o.order_item_id,
    s.stock_id,
    o.warehouse_id,
    u.created_by
FROM products p
JOIN order_items o ON o.product_id = p.product_id
JOIN stocks s ON s.product_id = p.product_id
JOIN users u ON u.business_id = p.business_id
JOIN orders ord ON ord.order_id = o.order_id
WHERE NOT EXISTS (
    SELECT 1
    FROM receiving_shipment rs
    WHERE rs.transaction_type = ord.order_type
    AND rs.status = 'PENDING'
    AND rs.product_id = p.product_id
    AND rs.order_item_id = o.order_item_id
    AND rs.stock_id = s.stock_id
)
GROUP BY 
    p.product_id, 
    o.order_item_id, 
    s.stock_id, 
    o.warehouse_id, 
    u.created_by, 
    ord.order_type;
</insert>
	
<!-- 오늘 입고 예정 리스트 -->
<select id="getReceivingList" resultMap="receivingShipmentMap">
	select
	r.receiving_shipment_no, 
	r.transaction_type, 
	r.created_at, 
	r.status, 
	r.product_id, 
	p.product_name, 
	p.product_description, 
	r.change_quantity, 
	r.memo
	from receiving_shipment r
	join products p on r.product_id = p.product_id
	join warehouses w on w.warehouse_id = r.warehouse_id
	JOIN users u on u.created_by = r.created_by
	where Date(r.created_at) = CURRENT_DATE and r.status = 'PENDING' and r.transaction_type = 'INBOUND'
	AND u.business_id = #{businessId}
	order by r.receiving_shipment_no desc
	limit 0, 20
</select>

<!-- 어제 입고 리스트 -->
<select id="getYesterdayReceivingList" resultMap="receivingShipmentMap">
	select
	r.receiving_shipment_no, 
	r.transaction_type, 
	r.created_at, 
	r.status, 
	r.product_id, 
	p.product_name, 
	p.product_description, 
	r.change_quantity, 
	r.memo
	from receiving_shipment r
	join products p on r.product_id = p.product_id
	join warehouses w on w.warehouse_id = r.warehouse_id
	JOIN users u on u.created_by = r.created_by
	where Date(r.created_at) = DATE_ADD(CURRENT_DATE, INTERVAL -1 DAY) 
	AND u.business_id = #{businessId}
	order by r.receiving_shipment_no desc
	limit 0, 20
</select>

<!-- 그저께 입고 리스트 -->
<select id="getTDBYReceivingList" resultMap="receivingShipmentMap">
	select
	r.receiving_shipment_no, 
	r.transaction_type, 
	r.created_at, 
	r.status, 
	r.product_id, 
	p.product_name, 
	p.product_description, 
	r.change_quantity, 
	r.memo
	from receiving_shipment r
	join products p on r.product_id = p.product_id
	join warehouses w on w.warehouse_id = r.warehouse_id
	JOIN users u on u.created_by = r.created_by
	where Date(r.created_at) = DATE_ADD(CURRENT_DATE, INTERVAL -2 DAY) 
	AND u.business_id = #{businessId}
	order by r.receiving_shipment_no desc
	limit 0, 20
</select>

<!-- 입고 내역 히스토리 -->
<select id="getReceivingHistoryList" resultMap="receivingShipmentMap">
	select
	r.receiving_shipment_no, 
	r.transaction_type, 
	r.created_at, 
	r.status, 
	r.product_id, 
	p.product_name, 
	p.product_description, 
	r.change_quantity, 
	p.product_price,
	r.warehouse_id,
	r.memo
	from receiving_shipment r
	join products p on r.product_id = p.product_id
	join warehouses w on w.warehouse_id = r.warehouse_id
	JOIN users u on u.created_by = r.created_by
	where transaction_type = 'INBOUND' AND u.business_id = #{businessId}
	order by r.receiving_shipment_no desc
	limit #{cri.startPage},#{cri.pageSize};
</select>

<!-- 입고 내역 검색 -->
<select id="getHistoryByDateRange" parameterType="map" resultMap="receivingShipmentMap">
    SELECT 
    r.receiving_shipment_no, 
    r.transaction_type, 
    r.created_at, 
    r.status, 
    r.product_id, 
    p.product_name, 
    p.product_description, 
    r.change_quantity, 
    p.product_price,
    r.warehouse_id,
    r.memo
    FROM receiving_shipment r
    JOIN products p ON r.product_id = p.product_id
    JOIN warehouses w ON w.warehouse_id = r.warehouse_id
    JOIN users u on u.created_by = r.created_by
    <where>
        <if test="startDate != ''">
            r.created_at &gt;= #{startDate}
        </if>
        <if test="endDate != ''">
            AND r.created_at &lt;= #{endDate}
        </if>
        <if test="keyword != ''">
            AND (p.product_name LIKE CONCAT('%', #{keyword}, '%') )
        </if>
        	AND transaction_type = 'INBOUND' 
        	AND u.business_id = #{businessId}
    </where>
    ORDER BY r.receiving_shipment_no desc
    limit #{cri.startPage},#{cri.pageSize};
</select>

<!-- 키워드 검색시 모든 개수 카운트 -->
<select id="getTotalCountBySearch" parameterType="map" resultType="int">
    SELECT COUNT(*) 
    FROM receiving_shipment r
    JOIN products p ON r.product_id = p.product_id
    JOIN users u on u.created_by = r.created_by
    <where>
        <if test="startDate != ''">
            r.created_at &gt;= #{startDate}
        </if>
        <if test="endDate != ''">
            AND r.created_at &lt;= #{endDate}
        </if>
        <if test="keyword != ''">
            AND p.product_name LIKE CONCAT('%', #{keyword}, '%')
        </if>
        AND r.transaction_type = 'INBOUND'
        AND u.business_id = #{businessId}
    </where>
    ORDER BY r.receiving_shipment_no desc
</select>

<!-- 입출고 모든 개수 카운트 -->
<select id="getTotalCount" resultType="int">
	select count(*)
	from receiving_shipment r
	JOIN users u on u.created_by = r.created_by
	where transaction_type = 'INBOUND'
	AND u.business_id = #{businessId}
</select>

   <!-- receiving scan을 위한 매퍼 -->
   <!-- 바코드로 제품 조회 -->
<select id="selectQuantityCheckByBarcode" resultType="com.stockm8.domain.vo.StockVO">
	SELECT s.product_id, p.product_name, s.total_quantity, s.warehouse_id
	FROM stocks s
	JOIN products p ON p.product_id = s.product_id
	WHERE p.product_barcode = #{barcode} AND s.business_id = #{businessId}
</select>

<!-- 바코드로 재고 1 감소 -->
<update id="updateIncreseStock">
    UPDATE stocks s
    JOIN products p on p.product_id = s.product_id
    SET s.total_quantity = s.total_quantity + 1,
    s.reserved_quantity = s.reserved_quantity -1
    WHERE p.product_barcode = #{barcode} AND s.business_id = #{businessId}
    AND s.reserved_quantity > 0
</update>

<!-- 바코드로 남은 재고 조회 -->
<select id="selectStockByBarcode" resultType="int">
    SELECT s.total_quantity
    FROM stocks s
    JOIN products p on p.product_id = s.product_id
    WHERE p.product_barcode = #{barcode} AND s.business_id = #{businessId}
</select>

<!-- 바코드로 남은 발주 수량 조회 -->
<select id="selectReservedQuantity" resultType="int">
    SELECT s.reserved_quantity
    FROM stocks s
    JOIN products p on p.product_id = s.product_id
    WHERE p.product_barcode = #{barcode} AND s.business_id = #{businessId}
</select>

<!-- 바코드로 제품 이름 조회 -->
<select id="selectProductNameBarcode" resultType="com.stockm8.domain.vo.ProductVO">
    SELECT p.product_name, p.product_price
    FROM stocks s
    JOIN products p on p.product_id = s.product_id
    WHERE p.product_barcode = #{barcode} AND s.business_id = #{businessId}
</select>

<update id="updateReceivingStatusToComplete">
    UPDATE receiving_shipment r
    JOIN products p ON r.product_id = p.product_id
    JOIN stocks s ON s.product_id = p.product_id
    SET r.status = 'COMPLETED'
    WHERE p.product_barcode = #{barcode}
    AND s.reserved_quantity = 1
    AND r.status = 'PENDING'
    AND s.business_id = #{businessId};
</update>
<!-- receiving scan을 위한 매퍼 -->

</mapper>
