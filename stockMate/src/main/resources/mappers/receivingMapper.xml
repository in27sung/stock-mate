<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.stockm8.mappers.receivingMapper">
  
  <resultMap type="com.stockm8.domain.vo.ReceivingShipmentVO" id="receivingshipmentMap">
  	<id property="productId" column="product_id"/>
  	<result property="receivingShipmentNo" column="receiving_shipment_no"/>
  	<result property="createdAt" column="created_at"/>
  	<result property="status" column="status"/>
  	<result property="transactionType" column="transaction_type"/>
  	<result property="changeQuantity" column="change_quantity"/>
  	<result property="transactionUnit" column="transaction_unit"/>
  	<result property="orderItemId" column="order_item_id"/>
  	<result property="stockId" column="stock_id"/>
  	<result property="warehouseId" column="warehouse_id"/>
  	<result property="createdBy" column="created_by"/>
  	<result property="updateAt" column="update_at"/>
  	<result property="memo" column="memo"/>
  	
  	<!-- 조인된 데이터 매핑 -->
    <result property="name" column="name"/>
    <result property="description" column="description"/>
    <result property="price" column="price"/>
  </resultMap>
  

<!-- 테이블에 입고 데이터 입력 -->
<insert id="insertReceiving">
	INSERT INTO test_receiving_shipment (
	transaction_type, 
	status, 
	product_id, 
	change_quantity, 
	transaction_unit,
	order_item_id,
	stock_id,
	warehouse_id,
    created_by
	)
	SELECT 
	'INBOUND', 
	'PENDING',
	p.product_id, 
	o.quantity, 
	p.base_unit,
	o.order_item_id,
	s.stock_id,
	o.warehouse_id,
    u.created_by
	FROM test_products p
	JOIN test_order_items o ON o.product_id = p.product_id
	JOIN test_stocks s ON s.product_id = p.product_id
    JOIN test_users u ON u.business_id = p.business_id;
</insert>
	
<!-- 오늘 입고 예정 리스트 -->
<select id="getReceivingList" resultMap="receivingshipmentMap">
	select
	r.receiving_shipment_no, 
	r.transaction_type, 
	r.created_at, 
	r.status, 
	r.product_id, 
	p.name, 
	p.description, 
	r.change_quantity, 
	r.memo
	from receiving_shipment r
	join products p on r.product_id = p.product_id
	join warehouses w on w.warehouse_id = r.warehouse_id
	where Date(r.created_at) = CURRENT_DATE and r.status = 'pending' and r.transaction_type = 'INBOUND'
	order by r.receiving_shipment_no desc
	limit 0, 20
</select>

<!-- 어제 입고 리스트 -->
<select id="getYesterdayReceivingList" resultMap="receivingshipmentMap">
	select
	r.receiving_shipment_no, 
	r.transaction_type, 
	r.created_at, 
	r.status, 
	r.product_id, 
	p.name, 
	p.description, 
	r.change_quantity, 
	r.memo
	from receiving_shipment r
	join products p on r.product_id = p.product_id
	join warehouses w on w.warehouse_id = r.warehouse_id
	where Date(r.created_at) = DATE_ADD(CURRENT_DATE, INTERVAL -1 DAY) 
	order by r.receiving_shipment_no desc
	limit 0, 20
</select>

<!-- 그저께 입고 리스트 -->
<select id="getTDBYReceivingList" resultMap="receivingshipmentMap">
	select
	r.receiving_shipment_no, 
	r.transaction_type, 
	r.created_at, 
	r.status, 
	r.product_id, 
	p.name, 
	p.description, 
	r.change_quantity, 
	r.memo
	from receiving_shipment r
	join products p on r.product_id = p.product_id
	join warehouses w on w.warehouse_id = r.warehouse_id
	where Date(r.created_at) = DATE_ADD(CURRENT_DATE, INTERVAL -2 DAY) 
	order by r.receiving_shipment_no desc
	limit 0, 20
</select>

<!-- 입고 내역 히스토리 -->
<select id="getReceivingHistoryList" resultMap="receivingshipmentMap">
	select
	r.receiving_shipment_no, 
	r.transaction_type, 
	r.created_at, 
	r.status, 
	r.product_id, 
	p.name, 
	p.description, 
	r.change_quantity, 
	p.price,
	r.memo
	from test_receiving_shipment r
	join test_products p on r.product_id = p.product_id
	join test_warehouses w on w.warehouse_id = r.warehouse_id
	where transaction_type = 'in'
	order by r.receiving_shipment_no desc
	limit #{startPage},#{pageSize};
</select>

<!-- 입고 내역 검색 -->
<select id="getHistoryByDateRange" parameterType="map" resultMap="receivingshipmentMap">
    SELECT 
    r.receiving_shipment_no, 
    r.transaction_type, 
    r.created_at, 
    r.status, 
    r.product_id, 
    p.name, 
    p.description, 
    r.change_quantity, 
    p.price,
    r.memo
    FROM receiving_shipment r
    JOIN products p ON r.product_id = p.product_id
    JOIN warehouses w ON w.warehouse_id = r.warehouse_id
    <where>
        <if test="startDate != ''">
            r.created_at &gt;= #{startDate}
        </if>
        <if test="endDate != ''">
            AND r.created_at &lt;= #{endDate}
        </if>
        <if test="keyword != ''">
            AND (p.name LIKE CONCAT('%', #{keyword}, '%') )
        </if>
        	AND transaction_type = 'INBOUND'
    </where>
    ORDER BY r.receiving_shipment_no desc
    limit #{cri.startPage},#{cri.pageSize};
</select>

<!-- 키워드 검색시 모든 개수 카운트 -->
<select id="getTotalCountBySearch" parameterType="map" resultType="int">
    SELECT COUNT(*) 
    FROM receiving_shipment r
    JOIN products p ON r.product_id = p.product_id
    <where>
        <if test="startDate != ''">
            r.created_at &gt;= #{startDate}
        </if>
        <if test="endDate != ''">
            AND r.created_at &lt;= #{endDate}
        </if>
        <if test="keyword != ''">
            AND p.name LIKE CONCAT('%', #{keyword}, '%')
        </if>
        AND r.transaction_type = 'INBOUND'
    </where>
    ORDER BY r.receiving_shipment_no desc
</select>

<!-- 입출고 모든 개수 카운트 -->
<select id="getTotalCount" resultType="int">
	select count(*)
	from test_receiving_shipment
	where transaction_type = 'in'
</select>
  	
  </mapper>