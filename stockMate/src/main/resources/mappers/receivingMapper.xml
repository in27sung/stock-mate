<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stockm8.mapper.ReceivingShipmentMapper">

    <!-- ResultMap 정의 -->
    <resultMap type="com.stockm8.domain.vo.ReceivingShipmentVO" id="receivingshipmentMap">
        <id property="productId" column="product_id"/>
        <result property="receivingShipmentNo" column="receiving_shipment_no"/>
        <result property="createdAt" column="created_at"/>
        <result property="status" column="status"/>
        <result property="transactionType" column="transaction_type"/>
        <result property="changeQuantity" column="change_quantity"/>
        <result property="transactionUnit" column="transaction_unit"/>
        <result property="orderItemId" column="order_item_id"/>
        <result property="stockId" column="stock_id"/>
        <result property="warehouseId" column="warehouse_id"/>
        <result property="createdBy" column="created_by"/>
        <result property="updateAt" column="update_at"/>
        <result property="memo" column="memo"/>
		
		<!-- 조인된 데이터 매핑 -->
		<result property="productName" column="product_name"/>
		<result property="productDescription" column="product_description"/>
		<result property="productPrice" column="product_price"/>
    </resultMap>

    <!-- 테이블에 입고 데이터 입력 -->
    <insert id="insertReceiving">
        INSERT INTO receiving_shipment (
            transaction_type, 
            status, 
            product_id, 
            change_quantity, 
            transaction_unit,
            order_item_id,
            stock_id,
            warehouse_id,
            created_by
        )
        SELECT 
            'INBOUND', 
            'PENDING',
            p.product_id, 
            o.product_quantity, 
            p.base_unit,
            o.order_item_id,
            s.stock_id,
            o.warehouse_id,
            u.created_by
        FROM products p
        JOIN order_items o ON o.product_id = p.product_id
        JOIN stocks s ON s.product_id = p.product_id
        JOIN users u ON u.business_id = p.business_id;
    </insert>

    <!-- 오늘 입고 예정 리스트 -->
    <select id="getReceivingList" resultMap="receivingshipmentMap">
        SELECT
            r.receiving_shipment_no, 
            r.transaction_type, 
            r.created_at, 
            r.status, 
            r.product_id, 
            p.product_name, 
            p.product_description, 
            r.change_quantity, 
            r.memo
        FROM receiving_shipment r
        JOIN products p ON r.product_id = p.product_id
        JOIN warehouses w ON w.warehouse_id = r.warehouse_id
        WHERE DATE(r.created_at) = CURRENT_DATE 
          AND r.status = 'PENDING' 
          AND r.transaction_type = 'INBOUND'
        ORDER BY r.receiving_shipment_no DESC
        LIMIT 0, 20;
    </select>

    <!-- 어제 입고 리스트 -->
    <select id="getYesterdayReceivingList" resultMap="receivingshipmentMap">
        SELECT
            r.receiving_shipment_no, 
            r.transaction_type, 
            r.created_at, 
            r.status, 
            r.product_id, 
            p.product_name, 
            p.product_description, 
            r.change_quantity, 
            r.memo
        FROM receiving_shipment r
        JOIN products p ON r.product_id = p.product_id
        JOIN warehouses w ON w.warehouse_id = r.warehouse_id
        WHERE DATE(r.created_at) = DATE_ADD(CURRENT_DATE, INTERVAL -1 DAY) 
        ORDER BY r.receiving_shipment_no DESC
        LIMIT 0, 20;
    </select>

    <!-- 그저께 입고 리스트 -->
    <select id="getTDBYReceivingList" resultMap="receivingshipmentMap">
        SELECT
            r.receiving_shipment_no, 
            r.transaction_type, 
            r.created_at, 
            r.status, 
            r.product_id, 
            p.product_name, 
            p.product_description, 
            r.change_quantity, 
            r.memo
        FROM receiving_shipment r
        JOIN products p ON r.product_id = p.product_id
        JOIN warehouses w ON w.warehouse_id = r.warehouse_id
        WHERE DATE(r.created_at) = DATE_ADD(CURRENT_DATE, INTERVAL -2 DAY) 
        ORDER BY r.receiving_shipment_no DESC
        LIMIT 0, 20;
    </select>

    <!-- 입고 내역 히스토리 -->
    <select id="getReceivingHistoryList" resultMap="receivingshipmentMap">
        SELECT
            r.receiving_shipment_no, 
            r.transaction_type, 
            r.created_at, 
            r.status, 
            r.product_id, 
            p.product_name, 
            p.product_description, 
            r.change_quantity, 
            p.product_price,
            r.memo
        FROM receiving_shipment r
        JOIN products p ON r.product_id = p.product_id
        JOIN warehouses w ON w.warehouse_id = r.warehouse_id
        WHERE r.transaction_type = 'INBOUND'
        ORDER BY r.receiving_shipment_no DESC
        LIMIT #{startPage}, #{pageSize};
    </select>

    <!-- 입고 내역 검색 -->
    <select id="getHistoryByDateRange" parameterType="map" resultMap="receivingshipmentMap">
        SELECT 
            r.receiving_shipment_no, 
            r.transaction_type, 
            r.created_at, 
            r.status, 
            r.product_id, 
            p.product_name, 
            p.product_description, 
            r.change_quantity, 
            p.product_price,
            r.memo
        FROM receiving_shipment r
        JOIN products p ON r.product_id = p.product_id
        JOIN warehouses w ON w.warehouse_id = r.warehouse_id
        <where>
            <if test="startDate != null and startDate != ''">
                r.created_at &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND r.created_at &lt;= #{endDate}
            </if>
            <if test="keyword != null and keyword != ''">
                AND p.product_name LIKE CONCAT('%', #{keyword}, '%')
            </if>
            AND r.transaction_type = 'INBOUND'
        </where>
        ORDER BY r.receiving_shipment_no DESC
        LIMIT #{cri.startPage}, #{cri.pageSize};
    </select>

    <!-- 키워드 검색시 모든 개수 카운트 -->
    <select id="getTotalCountBySearch" parameterType="map" resultType="int">
        SELECT COUNT(*) 
        FROM receiving_shipment r
        JOIN products p ON r.product_id = p.product_id
        <where>
            <if test="startDate != null and startDate != ''">
                r.created_at &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND r.created_at &lt;= #{endDate}
            </if>
            <if test="keyword != null and keyword != ''">
                AND p.product_name LIKE CONCAT('%', #{keyword}, '%')
            </if>
            AND r.transaction_type = 'INBOUND'
        </where>
    </select>

    <!-- 입출고 모든 개수 카운트 -->
    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*)
        FROM receiving_shipment
        WHERE transaction_type = 'INBOUND';
    </select>
</mapper>