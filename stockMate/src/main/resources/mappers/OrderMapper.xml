<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.stockm8.mapper.OrderMapper">
    <!-- 사용 가능한 재고 목록 조회 -->
    <select id="findAvailableStocks" resultMap="stockWithProductMap">
        SELECT 
            s.stock_id, 
            s.product_id, 
            s.warehouse_id, 
            s.business_id,
            s.total_quantity, 
            s.reserved_quantity, 
            s.available_stock,
            s.description as stock_description,
            p.product_name, 
            p.product_barcode, 
            p.base_unit, 
            p.set_size, 
            p.product_price,
            p.product_description as product_description,
            w.warehouse_name
        FROM 
            stocks s
            JOIN products p ON s.product_id = p.product_id
            JOIN warehouses w ON s.warehouse_id = w.warehouse_id
        WHERE
            s.is_deleted = false
            AND p.is_deleted = false
            AND w.is_deleted = false
            AND s.available_stock > 0
            AND s.business_id = #{businessId} <!-- 비즈니스 id를 가져와야지만 됨 해당목록???만 보이게 ??  -->
        ORDER BY 
            p.product_name ASC
    </select>

    <!-- ResultMap은 한 번만 정의 -->
    <resultMap id="stockWithProductMap" type="com.stockm8.domain.vo.StockVO">
        <id property="stockId" column="stock_id"/>
        <result property="productId" column="product_id"/>
        <result property="warehouseId" column="warehouse_id"/>
        <result property="businessId" column="business_id"/>
        <result property="totalQuantity" column="total_quantity"/>
        <result property="reservedQuantity" column="reserved_quantity"/>
        <result property="availableStock" column="available_stock"/>
        <result property="description" column="stock_description"/>
        <result property="warehouseName" column="warehouse_name"/>
        <association property="product" javaType="com.stockm8.domain.vo.ProductVO">
            <id property="productId" column="product_id"/>
            <result property="productName" column="product_name"/>
            <result property="productBarcode" column="product_barcode"/>
            <result property="baseUnit" column="base_unit"/>
            <result property="setSize" column="set_size"/>
            <result property="productPrice" column="product_price"/>
            <result property="productDescription" column="product_description"/>
        </association>
    </resultMap>

    <!-- 주문 등록 -->
    <insert id="insertOrder" parameterType="com.stockm8.domain.vo.OrderVO">
        INSERT INTO orders (
            order_number,
            total_price,
            created_by,
            created_at,
            order_type
        ) VALUES (
            #{orderNumber},
            #{totalPrice},
            #{createdBy},
            NOW(),
            #{orderType}
        )
        <selectKey keyProperty="orderId" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- 주문 상세 항목 등록 -->
    <insert id="insertOrderItem" parameterType="com.stockm8.domain.vo.OrderItemVO">
        INSERT INTO order_items (
            order_id,
            product_id,
            warehouse_id,
            quantity,
            unit_price,
            remarks,
            created_at
            <!-- stock_id -->
            <!-- subtotal_price -->
        ) VALUES (
            #{orderId},
            #{productId},
            #{warehouseId},
            #{quantity},
            #{unitPrice},
            #{remarks},
            NOW()
            <!-- #{stockId} -->
            <!-- #{stotalPrice} -->
        )
    </insert>

    <!-- 재고 예약 수량 업데이트 -->
    <update id="updateStockQuantity" parameterType="map">
        UPDATE stocks 
        SET reserved_quantity = reserved_quantity + #{quantity}
        WHERE stock_id = #{stockId}

	</update>

    <!-- 해당 날짜의 마지막 주문번호 조회 -->
    <select id="getLastOrderNumberForDate" resultType="String">
        SELECT order_number 
        FROM orders 
        WHERE order_number LIKE CONCAT('ORD-', #{date}, '-%')
        ORDER BY order_number DESC 
        LIMIT 1
    </select>
    
    <!-- 오더목록 조회 -->
    <select id="orderList" resultType="com.stockm8.domain.vo.OrderVO">
    	select * from test_orders
    
    </select>
    
    
    
    <!-- 재고 정보 단건 조회  미사용 -->
    <select id="getStockById" resultMap="stockWithProductMap">
        SELECT 
            s.stock_id, 
            s.product_id, 
            s.warehouse_id, 
            s.business_id,
            s.total_quantity, 
            s.reserved_quantity, 
            s.available_stock,
            s.description as stock_description,
            p.name, 
            p.barcode, 
            p.base_unit, 
            p.set_size, 
            p.price,
            p.description as product_description,
            w.warehouse_name
        FROM 
            test_stocks s
            JOIN test_products p ON s.product_id = p.product_id
            JOIN test_warehouses w ON s.warehouse_id = w.warehouse_id
        WHERE
            s.stock_id = #{stockId}
            AND s.is_deleted = false
            AND p.is_deleted = false
            AND w.is_deleted = false
    </select>
    
    
    <!-- 재고 이력 등록 미사용 -->
    <insert id="insertStockHistory" parameterType="map">
        INSERT INTO test_stock_history (
            stock_id,
            order_id,
            quantity_changed,
            action_type,
            created_by,
            created_at,
            remarks
        ) VALUES (
            #{stockId},
            #{orderId},
            #{quantityChanged},
            #{actionType},
            #{createdBy},
            NOW(),
            #{remarks}
        )
    </insert>
    
    
    
    
    
    
</mapper>