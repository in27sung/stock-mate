<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stockm8.mapper.OrderMapper">
    <!-- Stock과 Product 연관 정보를 함께 조회하는 ResultMap -->
    <resultMap id="stockWithProductMap" type="com.stockm8.domain.vo.StockVO">
        <id property="stockId" column="stock_id"/>
        <result property="productId" column="product_id"/>
        <result property="warehouseId" column="warehouse_id"/>
        <result property="businessId" column="business_id"/>
        <result property="totalQuantity" column="total_quantity"/>
        <result property="reservedQuantity" column="reserved_quantity"/>
        <result property="availableStock" column="available_stock"/>
        <result property="description" column="stock_description"/>
        <result property="warehouseName" column="warehouse_name"/>
        <association property="product" javaType="com.stockm8.domain.vo.ProductVO">
            <id property="productId" column="product_id"/>
            <result property="productName" column="product_name"/>
            <result property="productBarcode" column="product_barcode"/>
            <result property="baseUnit" column="base_unit"/>
            <result property="setSize" column="set_size"/>
            <result property="productPrice" column="product_price"/>
            <result property="productDescription" column="product_description"/>
        </association>
    </resultMap>

    <!-- 주문 상세 항목과 연관 정보를 함께 조회하는 ResultMap -->
    <resultMap id="orderItemResultMap" type="com.stockm8.domain.vo.OrderItemVO">
        <id property="orderItemId" column="order_item_id"/>
        <result property="orderId" column="order_id"/>
        <result property="productId" column="product_id"/>
        <result property="warehouseId" column="warehouse_id"/>
        <result property="quantity" column="quantity"/>
        <result property="ChangeQuantity" column="change_quantity"/>
        <result property="unitPrice" column="unit_price"/>
        <result property="remarks" column="remarks"/>
        <result property="subtotalPrice" column="subtotal_price"/>  
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="stockId" column="stock_id"/>
        <result property="productName" column="product_name"/>
        <result property="productBarcode" column="product_barcode"/>
        <result property="warehouseName" column="warehouse_name"/>
        <result property="baseUnit" column="base_unit"/>
        <result property="shipmentStatus" column="shipment_status"/>
        <association property="product" javaType="com.stockm8.domain.vo.ProductVO">
            <id property="productId" column="product_id"/>
            <result property="productName" column="product_name"/>
            <result property="productBarcode" column="product_barcode"/>
            <result property="productPrice" column="product_price"/>
            <result property="baseUnit" column="base_unit"/>
        </association>
    </resultMap>

    <!-- 사업자별 사용 가능한 재고 목록 조회 -->
    <select id="findAvailableStocks" resultMap="stockWithProductMap">
        SELECT 
            s.stock_id, 
            s.product_id, 
            s.warehouse_id, 
            s.business_id,
            s.total_quantity, 
            s.reserved_quantity, 
            s.available_stock,
            s.description as stock_description,
            p.product_name, 
            p.product_barcode, 
            p.base_unit, 
            p.set_size, 
            p.product_price,
            p.product_description as product_description,
            w.warehouse_name
        FROM 
            stocks s
            JOIN products p ON s.product_id = p.product_id
            JOIN warehouses w ON s.warehouse_id = w.warehouse_id
        WHERE
            s.is_deleted = false
            AND p.is_deleted = false
            AND w.is_deleted = false
        <!--     AND s.available_stock > 0 -->
            AND s.business_id = #{businessId}
        ORDER BY 
            p.product_name ASC
    </select>

    <!-- 신규 주문 등록 및 생성된 orderId 반환 -->
    <insert id="insertOrder" parameterType="com.stockm8.domain.vo.OrderVO">
        INSERT INTO orders (
            order_number,
            total_price,
            created_by,
            created_at,
            order_type
        ) VALUES (
            #{orderNumber},
            #{totalPrice},
            #{createdBy},
            NOW(),
            #{orderType}
        )
        <selectKey keyProperty="orderId" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- 주문 상세 항목 등록 -->
    <insert id="insertOrderItem" parameterType="com.stockm8.domain.vo.OrderItemVO">
        INSERT INTO order_items (
            order_id,
            product_id,
            warehouse_id,
            quantity,
            change_quantity,
            unit_price,
            remarks,
            created_at
        ) VALUES (
            #{orderId},
            #{productId},
            #{warehouseId},
            #{quantity},
            #{quantity},
            #{unitPrice},
            #{remarks},
            NOW()
        )
    </insert>

    <!-- 재고 예약 수량 업데이트 -->
    <update id="updateStockQuantity">
        UPDATE stocks 
        SET reserved_quantity = reserved_quantity + #{quantity}
        WHERE stock_id = #{stockId}
    </update>

    <!-- 특정 날짜의 마지막 주문번호 조회 -->
    <select id="getLastOrderNumberForDate" resultType="String">
        SELECT order_number 
        FROM orders 
        WHERE order_number LIKE CONCAT('ORD-', #{date}, '-%')
        ORDER BY order_number DESC 
        LIMIT 1
    </select>
    
    <!-- 사업자별 주문 목록 조회 (페이징 처리) -->
    <select id="getOrderList" resultType="com.stockm8.domain.vo.OrderVO">
        SELECT o.*
        FROM orders o
        JOIN users u ON o.created_by = u.user_id
        WHERE u.business_id = #{businessId}
        ORDER BY o.created_at DESC
        LIMIT #{cri.startPage}, #{cri.pageSize}
    </select>
    
    <!-- 주문 정보 단건 조회 -->
    <select id="getOrderById" resultType="com.stockm8.domain.vo.OrderVO">
        SELECT *
        FROM orders 
        WHERE order_id = #{orderId}
    </select>

    <!-- 주문 상세 항목 목록 조회 (최신 상태 포함) -->
    <select id="getOrderItemsByOrderId" resultMap="orderItemResultMap">
        SELECT 
            oi.order_item_id,
            oi.order_id,
            oi.product_id,
            oi.warehouse_id,
            oi.quantity,
            oi.unit_price,
            oi.remarks,
            oi.subtotal_price,    
            oi.created_at,
            oi.updated_at,
            p.product_name,
            p.product_barcode,
            p.base_unit,
            p.product_price,
            w.warehouse_name,
            rs.status as shipment_status
        FROM 
            order_items oi   
            INNER JOIN products p ON oi.product_id = p.product_id
            INNER JOIN warehouses w ON oi.warehouse_id = w.warehouse_id
            INNER JOIN receiving_shipment rs ON oi.order_item_id = rs.order_item_id
        WHERE 
            oi.order_id = #{orderId}
            AND rs.receiving_shipment_no = (
                SELECT MAX(receiving_shipment_no) 
                FROM receiving_shipment 
                WHERE order_item_id = oi.order_item_id
            )
        ORDER BY 
            oi.order_item_id ASC
    </select>

    <!-- 재고 정보 조회 (가용 수량 포함) -->
    <select id="findStockWithAvailableQuantity" resultMap="stockWithProductMap">
        SELECT 
            s.stock_id, 
            s.product_id, 
            s.warehouse_id, 
            s.business_id,
            s.total_quantity, 
            s.reserved_quantity, 
            s.available_stock,
            s.description as stock_description,
            p.product_name, 
            p.product_barcode, 
            p.base_unit, 
            p.set_size, 
            p.product_price,
            p.product_description,
            w.warehouse_name
        FROM 
            stocks s
            JOIN products p ON s.product_id = p.product_id
            JOIN warehouses w ON s.warehouse_id = w.warehouse_id
        WHERE
            s.stock_id = #{stockId}
            AND s.is_deleted = false
            AND p.is_deleted = false
            AND w.is_deleted = false
    </select>
    
    <!-- 주문 전체 개수 조회 (페이징 계산용) -->
    <select id="getTotalOrderCount" resultType="int">
        SELECT COUNT(*)
        FROM orders o
        JOIN users u ON o.created_by = u.user_id
        WHERE u.business_id = #{businessId}
    </select>
    
    <!-- 
    @deprecated 이 쿼리는 ReceivingMapper로 이동 예정입니다.
    입고 검수 처리에서만 사용되는 기능이므로 OrderMapper에서 제거될 예정입니다. 한수씨랑 일정은 협의
    -->
    <select id="getOrderIdByOrderItemId" parameterType="int" resultType="int">
        SELECT order_id 
        FROM order_items   
        WHERE order_item_id = #{orderItemId}
    </select>
</mapper>